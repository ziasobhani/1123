
AVRASM ver. 2.1.30  C:\Users\Caspian Revo\Desktop\New folder\List\1.asm Tue Dec 27 00:00:10 2016

C:\Users\Caspian Revo\Desktop\New folder\List\1.asm(1072): warning: Register r5 already defined by the .DEF directive
C:\Users\Caspian Revo\Desktop\New folder\List\1.asm(1073): warning: Register r4 already defined by the .DEF directive
C:\Users\Caspian Revo\Desktop\New folder\List\1.asm(1074): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 8/000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0053 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 2020
00002b 2020
00002c 2020
00002d 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00002e 2020
00002f 0020
000030 434f
000031 3052      	.DB  0x20,0x20,0x20,0x0,0x4F,0x43,0x52,0x30
000032 203a
000033 4400
000034 7269
000035 6365      	.DB  0x3A,0x20,0x0,0x44,0x69,0x72,0x65,0x63
000036 6974
000037 6e6f
000038 203a
000039 654c      	.DB  0x74,0x69,0x6F,0x6E,0x3A,0x20,0x4C,0x65
00003a 7466
00003b 0020
00003c 6944
00003d 6572      	.DB  0x66,0x74,0x20,0x0,0x44,0x69,0x72,0x65
00003e 7463
00003f 6f69
000040 3a6e
000041 5220      	.DB  0x63,0x74,0x69,0x6F,0x6E,0x3A,0x20,0x52
000042 6769
000043 7468
000044 0020
000045 6944      	.DB  0x69,0x67,0x68,0x74,0x20,0x0,0x44,0x69
000046 6572
000047 7463
000048 6f69
000049 3a6e      	.DB  0x72,0x65,0x63,0x74,0x69,0x6F,0x6E,0x3A
00004a 4220
00004b 6172
00004c 656b
00004d 0020      	.DB  0x20,0x42,0x72,0x61,0x6B,0x65,0x20,0x0
                 _0x2000003:
00004e c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004f 0002      	.DW  0x02
000050 0160      	.DW  __base_y_G100
000051 009c      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000052 0000      	.DW  0
                 
                 __RESET:
000053 94f8      	CLI
000054 27ee      	CLR  R30
000055 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000056 e0f1      	LDI  R31,1
000057 bffb      	OUT  GICR,R31
000058 bfeb      	OUT  GICR,R30
000059 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00005a e1f8      	LDI  R31,0x18
00005b bdf1      	OUT  WDTCR,R31
00005c bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00005d e08d      	LDI  R24,(14-2)+1
00005e e0a2      	LDI  R26,2
00005f 27bb      	CLR  R27
                 __CLEAR_REG:
000060 93ed      	ST   X+,R30
000061 958a      	DEC  R24
000062 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000063 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000064 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000065 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000066 93ed      	ST   X+,R30
000067 9701      	SBIW R24,1
000068 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000069 e9ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006b 9185      	LPM  R24,Z+
00006c 9195      	LPM  R25,Z+
00006d 9700      	SBIW R24,0
00006e f061      	BREQ __GLOBAL_INI_END
00006f 91a5      	LPM  R26,Z+
000070 91b5      	LPM  R27,Z+
000071 9005      	LPM  R0,Z+
000072 9015      	LPM  R1,Z+
000073 01bf      	MOVW R22,R30
000074 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000075 9005      	LPM  R0,Z+
000076 920d      	ST   X+,R0
000077 9701      	SBIW R24,1
000078 f7e1      	BRNE __GLOBAL_INI_LOOP
000079 01fb      	MOVW R30,R22
00007a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007c bfed      	OUT  SPL,R30
00007d e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000080 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000081 940c 0083 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#asm
                    .equ __lcd_port=0x1B ;PORTA
                 ; 0000 0004 #endasm
                 ;#include <lcd.h>
                 ;#include<delay.h>
                 ;void display_no(int no);
                 ;void direction(char dir);
                 ;void main(void)
                 ; 0000 000A {
                 
                 	.CSEG
                 _main:
                 ; 0000 000B PORTA=0x00;
000083 e0e0      	LDI  R30,LOW(0)
000084 bbeb      	OUT  0x1B,R30
                 ; 0000 000C DDRA=0x00;
000085 bbea      	OUT  0x1A,R30
                 ; 0000 000D PORTB=0x00;
000086 bbe8      	OUT  0x18,R30
                 ; 0000 000E DDRB=0x08;
000087 e0e8      	LDI  R30,LOW(8)
000088 bbe7      	OUT  0x17,R30
                 ; 0000 000F PORTC=0x00;
000089 e0e0      	LDI  R30,LOW(0)
00008a bbe5      	OUT  0x15,R30
                 ; 0000 0010 DDRC=0x00;
00008b bbe4      	OUT  0x14,R30
                 ; 0000 0011 PORTD=0x00;
00008c bbe2      	OUT  0x12,R30
                 ; 0000 0012 DDRD=0xFF;
00008d efef      	LDI  R30,LOW(255)
00008e bbe1      	OUT  0x11,R30
                 ; 0000 0013 TCCR0=0x6A;
00008f e6ea      	LDI  R30,LOW(106)
000090 bfe3      	OUT  0x33,R30
                 ; 0000 0014 TCNT0=0x00;
000091 e0e0      	LDI  R30,LOW(0)
000092 bfe2      	OUT  0x32,R30
                 ; 0000 0015 OCR0=0x00;
000093 bfec      	OUT  0x3C,R30
                 ; 0000 0016 MCUCR=0x00;
000094 bfe5      	OUT  0x35,R30
                 ; 0000 0017 MCUCSR=0x00;
000095 bfe4      	OUT  0x34,R30
                 ; 0000 0018 TIMSK=0x00;
000096 bfe9      	OUT  0x39,R30
                 ; 0000 0019 ACSR=0x80;
000097 e8e0      	LDI  R30,LOW(128)
000098 b9e8      	OUT  0x8,R30
                 ; 0000 001A SFIOR=0x00;
000099 e0e0      	LDI  R30,LOW(0)
00009a bfe0      	OUT  0x30,R30
                 ; 0000 001B lcd_init(16);
00009b e1a0      	LDI  R26,LOW(16)
00009c 940e 0204 	CALL _lcd_init
                 ; 0000 001C PORTC=255;
00009e efef      	LDI  R30,LOW(255)
00009f bbe5      	OUT  0x15,R30
                 ; 0000 001D direction(3);
0000a0 e0a3      	LDI  R26,LOW(3)
0000a1 d056      	RCALL _direction
                 ; 0000 001E while (1)
                 _0x3:
                 ; 0000 001F       {
                 ; 0000 0020       if (PINC.2==0 || PINC.3==0 || PINC.4==0 )
0000a2 e0a0      	LDI  R26,0
0000a3 999a      	SBIC 0x13,2
0000a4 e0a1      	LDI  R26,1
0000a5 30a0      	CPI  R26,LOW(0x0)
0000a6 f051      	BREQ _0x7
0000a7 e0a0      	LDI  R26,0
0000a8 999b      	SBIC 0x13,3
0000a9 e0a1      	LDI  R26,1
0000aa 30a0      	CPI  R26,LOW(0x0)
0000ab f029      	BREQ _0x7
0000ac e0a0      	LDI  R26,0
0000ad 999c      	SBIC 0x13,4
0000ae e0a1      	LDI  R26,1
0000af 30a0      	CPI  R26,LOW(0x0)
0000b0 f471      	BRNE _0x6
                 _0x7:
                 ; 0000 0021       {
                 ; 0000 0022           delay_ms(10);
0000b1 940e 0231 	CALL SUBOPT_0x0
                 ; 0000 0023           if (PINC.2==0)
0000b3 999a      	SBIC 0x13,2
0000b4 c002      	RJMP _0x9
                 ; 0000 0024                   direction(1);
0000b5 e0a1      	LDI  R26,LOW(1)
0000b6 d041      	RCALL _direction
                 ; 0000 0025           if (PINC.3==0)
                 _0x9:
0000b7 999b      	SBIC 0x13,3
0000b8 c002      	RJMP _0xA
                 ; 0000 0026                  direction(2);
0000b9 e0a2      	LDI  R26,LOW(2)
0000ba d03d      	RCALL _direction
                 ; 0000 0027           if (PINC.4==0)
                 _0xA:
0000bb 999c      	SBIC 0x13,4
0000bc c002      	RJMP _0xB
                 ; 0000 0028                  direction(3);
0000bd e0a3      	LDI  R26,LOW(3)
0000be d039      	RCALL _direction
                 ; 0000 0029 
                 ; 0000 002A        }
                 _0xB:
                 ; 0000 002B 
                 ; 0000 002C       lcd_gotoxy(0,1);
                 _0x6:
0000bf e0e0      	LDI  R30,LOW(0)
0000c0 93ea      	ST   -Y,R30
0000c1 e0a1      	LDI  R26,LOW(1)
0000c2 940e 01a3 	CALL _lcd_gotoxy
                 ; 0000 002D       lcd_putsf("           ");
                +
0000c4 e5a4     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000c5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000c6 940e 01e0 	CALL _lcd_putsf
                 ; 0000 002E       lcd_gotoxy(0,1);
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 93ea      	ST   -Y,R30
0000ca e0a1      	LDI  R26,LOW(1)
0000cb 940e 01a3 	CALL _lcd_gotoxy
                 ; 0000 002F       lcd_putsf("OCR0: ");
                +
0000cd e6a0     +LDI R26 , LOW ( 2 * _0x0 + ( 12 ) )
0000ce e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW2FN _0x0,12
0000cf 940e 01e0 	CALL _lcd_putsf
                 ; 0000 0030       display_no(OCR0);
0000d1 b7ec      	IN   R30,0x3C
0000d2 e0f0      	LDI  R31,0
0000d3 01df      	MOVW R26,R30
0000d4 d04a      	RCALL _display_no
                 ; 0000 0031 
                 ; 0000 0032       if (PINC.0==0 || PINC.1==0 )
0000d5 e0a0      	LDI  R26,0
0000d6 9998      	SBIC 0x13,0
0000d7 e0a1      	LDI  R26,1
0000d8 30a0      	CPI  R26,LOW(0x0)
0000d9 f029      	BREQ _0xD
0000da e0a0      	LDI  R26,0
0000db 9999      	SBIC 0x13,1
0000dc e0a1      	LDI  R26,1
0000dd 30a0      	CPI  R26,LOW(0x0)
0000de f4b9      	BRNE _0xC
                 _0xD:
                 ; 0000 0033       {
                 ; 0000 0034           delay_ms(10);
0000df 940e 0231 	CALL SUBOPT_0x0
                 ; 0000 0035 
                 ; 0000 0036           if (PINC.0==0)
0000e1 9998      	SBIC 0x13,0
0000e2 c009      	RJMP _0xF
                 ; 0000 0037           {
                 ; 0000 0038 
                 ; 0000 0039               if (OCR0> 250)
0000e3 b7ec      	IN   R30,0x3C
0000e4 3feb      	CPI  R30,LOW(0xFB)
0000e5 f010      	BRLO _0x10
                 ; 0000 003A                   OCR0=255;
0000e6 efef      	LDI  R30,LOW(255)
0000e7 c002      	RJMP _0x30
                 ; 0000 003B               else
                 _0x10:
                 ; 0000 003C                   OCR0=OCR0+5;
0000e8 b7ec      	IN   R30,0x3C
0000e9 5feb      	SUBI R30,-LOW(5)
                 _0x30:
0000ea bfec      	OUT  0x3C,R30
                 ; 0000 003D           }
                 ; 0000 003E           else if (PINC.1==0)
0000eb c00a      	RJMP _0x12
                 _0xF:
0000ec 9999      	SBIC 0x13,1
0000ed c008      	RJMP _0x13
                 ; 0000 003F           {
                 ; 0000 0040 
                 ; 0000 0041                    if(OCR0<5)
0000ee b7ec      	IN   R30,0x3C
0000ef 30e5      	CPI  R30,LOW(0x5)
0000f0 f410      	BRSH _0x14
                 ; 0000 0042                       OCR0=0;
0000f1 e0e0      	LDI  R30,LOW(0)
0000f2 c002      	RJMP _0x31
                 ; 0000 0043                    else
                 _0x14:
                 ; 0000 0044                       OCR0=OCR0-5;
0000f3 b7ec      	IN   R30,0x3C
0000f4 50e5      	SUBI R30,LOW(5)
                 _0x31:
0000f5 bfec      	OUT  0x3C,R30
                 ; 0000 0045           }
                 ; 0000 0046        }
                 _0x13:
                 _0x12:
                 ; 0000 0047        else
                 _0xC:
                 ; 0000 0048        {
                 ; 0000 0049 
                 ; 0000 004A 
                 ; 0000 004B        }
                 ; 0000 004C 
                 ; 0000 004D     }
0000f6 cfab      	RJMP _0x3
                 ; 0000 004E }
                 _0x17:
0000f7 cfff      	RJMP _0x17
                 ;void direction(char dir)
                 ; 0000 0050 {
                 _direction:
                 ; 0000 0051    switch(dir)
0000f8 93aa      	ST   -Y,R26
                 ;	dir -> Y+0
0000f9 81e8      	LD   R30,Y
0000fa e0f0      	LDI  R31,0
                 ; 0000 0052    {
                 ; 0000 0053          case 1:
0000fb 30e1      	CPI  R30,LOW(0x1)
0000fc e0a0      	LDI  R26,HIGH(0x1)
0000fd 07fa      	CPC  R31,R26
0000fe f439      	BRNE _0x1B
                 ; 0000 0054          PORTD.0=0;
0000ff 9890      	CBI  0x12,0
                 ; 0000 0055          PORTD.1=1;
000100 9a91      	SBI  0x12,1
                 ; 0000 0056          lcd_clear();
000101 940e 01b3 	CALL _lcd_clear
                 ; 0000 0057          lcd_putsf("Direction: Left ");
                +
000103 e6a7     +LDI R26 , LOW ( 2 * _0x0 + ( 19 ) )
000104 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 19 ) )
                 	__POINTW2FN _0x0,19
000105 c015      	RJMP _0x32
                 ; 0000 0058          break;
                 ; 0000 0059 
                 ; 0000 005A          case 2:
                 _0x1B:
000106 30e2      	CPI  R30,LOW(0x2)
000107 e0a0      	LDI  R26,HIGH(0x2)
000108 07fa      	CPC  R31,R26
000109 f439      	BRNE _0x20
                 ; 0000 005B          PORTD.0=1;
00010a 9a90      	SBI  0x12,0
                 ; 0000 005C          PORTD.1=0;
00010b 9891      	CBI  0x12,1
                 ; 0000 005D          lcd_clear();
00010c 940e 01b3 	CALL _lcd_clear
                 ; 0000 005E          lcd_putsf("Direction: Right ");
                +
00010e e7a8     +LDI R26 , LOW ( 2 * _0x0 + ( 36 ) )
00010f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 36 ) )
                 	__POINTW2FN _0x0,36
000110 c00a      	RJMP _0x32
                 ; 0000 005F          break;
                 ; 0000 0060 
                 ; 0000 0061          case 3:
                 _0x20:
000111 30e3      	CPI  R30,LOW(0x3)
000112 e0a0      	LDI  R26,HIGH(0x3)
000113 07fa      	CPC  R31,R26
000114 f441      	BRNE _0x1A
                 ; 0000 0062          PORTD.0=0;
000115 9890      	CBI  0x12,0
                 ; 0000 0063          PORTD.1=0;
000116 9891      	CBI  0x12,1
                 ; 0000 0064          lcd_clear();
000117 940e 01b3 	CALL _lcd_clear
                 ; 0000 0065          lcd_putsf("Direction: Brake ");
                +
000119 e8aa     +LDI R26 , LOW ( 2 * _0x0 + ( 54 ) )
00011a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 54 ) )
                 	__POINTW2FN _0x0,54
                 _0x32:
00011b 940e 01e0 	CALL _lcd_putsf
                 ; 0000 0066          break;
                 ; 0000 0067    }
                 _0x1A:
                 ; 0000 0068 }
00011d 940c 022f 	JMP  _0x2020001
                 ;void display_no(int no)
                 ; 0000 006A {
                 _display_no:
                 ; 0000 006B    int array[5];
                 ; 0000 006C    int i=0,j;
                 ; 0000 006D    /*if( no < 0)
                 ; 0000 006E    {
                 ; 0000 006F       lcd_putchar('-');
                 ; 0000 0070       no=-1*no;
                 ; 0000 0071    }
                 ; 0000 0072    else
                 ; 0000 0073       lcd_putchar('+');*/
                 ; 0000 0074     while(no > 9)
00011f 93ba      	ST   -Y,R27
000120 93aa      	ST   -Y,R26
000121 972a      	SBIW R28,10
000122 940e 0286 	CALL __SAVELOCR4
                 ;	no -> Y+14
                 ;	array -> Y+4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                +
000124 e000     +LDI R16 , LOW ( 0 )
000125 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2A:
000126 85ae      	LDD  R26,Y+14
000127 85bf      	LDD  R27,Y+14+1
000128 971a      	SBIW R26,10
000129 f0c4      	BRLT _0x2C
                 ; 0000 0075     {
                 ; 0000 0076        array[i++]= no % 10;
00012a 01f8      	MOVW R30,R16
                +
00012b 5f0f     +SUBI R16 , LOW ( - 1 )
00012c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00012d 940e 0235 	CALL SUBOPT_0x1
00012f 01bf      	MOVW R22,R30
000130 85ae      	LDD  R26,Y+14
000131 85bf      	LDD  R27,Y+14+1
000132 e0ea      	LDI  R30,LOW(10)
000133 e0f0      	LDI  R31,HIGH(10)
000134 940e 026a 	CALL __MODW21
000136 01db      	MOVW R26,R22
000137 93ed      	ST   X+,R30
000138 93fc      	ST   X,R31
                 ; 0000 0077        no/=10;
000139 85ae      	LDD  R26,Y+14
00013a 85bf      	LDD  R27,Y+14+1
00013b e0ea      	LDI  R30,LOW(10)
00013c e0f0      	LDI  R31,HIGH(10)
00013d 940e 0265 	CALL __DIVW21
00013f 87ee      	STD  Y+14,R30
000140 87ff      	STD  Y+14+1,R31
                 ; 0000 0078     }
000141 cfe4      	RJMP _0x2A
                 _0x2C:
                 ; 0000 0079     array[i]=no;
000142 01f8      	MOVW R30,R16
000143 940e 0235 	CALL SUBOPT_0x1
000145 85ae      	LDD  R26,Y+14
000146 85bf      	LDD  R27,Y+14+1
000147 83a0      	STD  Z+0,R26
000148 83b1      	STD  Z+1,R27
                 ; 0000 007A     for(j=i;j >=0 ;j--)
000149 0198      	MOVW R18,R16
                 _0x2E:
00014a 2333      	TST  R19
00014b f09a      	BRMI _0x2F
                 ; 0000 007B     {
                 ; 0000 007C        lcd_putchar(48+array[j]);
00014c 01f9      	MOVW R30,R18
00014d 01de      	MOVW R26,R28
00014e 9614      	ADIW R26,4
00014f 0fee      	LSL  R30
000150 1fff      	ROL  R31
000151 0fae      	ADD  R26,R30
000152 1fbf      	ADC  R27,R31
000153 91ec      	LD   R30,X
000154 5de0      	SUBI R30,-LOW(48)
000155 2fae      	MOV  R26,R30
000156 940e 01c6 	CALL _lcd_putchar
                 ; 0000 007D        delay_us(100);
                +
000158 ec88     +LDI R24 , LOW ( 200 )
000159 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00015a 9701     +SBIW R24 , 1
00015b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
                 ; 0000 007E        }
                +
00015c 5021     +SUBI R18 , LOW ( 1 )
00015d 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
00015e cfeb      	RJMP _0x2E
                 _0x2F:
                 ; 0000 007F 
                 ; 0000 0080 }
00015f 940e 028b 	CALL __LOADLOCR4
000161 9660      	ADIW R28,16
000162 9508      	RET
                 ;
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
000163 e0ff          ldi   r31,15
                 __lcd_delay0:
000164 95fa          dec   r31
000165 f7f1          brne  __lcd_delay0
000166 9508      	RET
                 __lcd_ready:
000167 b3aa          in    r26,__lcd_direction
000168 70af          andi  r26,0xf                 ;set as input
000169 bbaa          out   __lcd_direction,r26
00016a 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
00016b 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
00016c dff6      	RCALL __lcd_delay_G100
00016d 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
00016e dff4      	RCALL __lcd_delay_G100
00016f b3a9          in    r26,__lcd_pin
000170 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000171 dff1      	RCALL __lcd_delay_G100
000172 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000173 dfef      	RCALL __lcd_delay_G100
000174 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000175 fda7          sbrc  r26,__lcd_busy_flag
000176 cff5          rjmp  __lcd_busy
000177 9508      	RET
                 __lcd_write_nibble_G100:
000178 7fa0          andi  r26,0xf0
000179 2bab          or    r26,r27
00017a bbab          out   __lcd_port,r26          ;write
00017b 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
00017c 940e 0163 	CALL __lcd_delay_G100
00017e 98da          cbi   __lcd_port,__lcd_enable ;EN=0
00017f 940e 0163 	CALL __lcd_delay_G100
000181 9508      	RET
                 __lcd_write_data:
000182 93aa      	ST   -Y,R26
000183 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000184 b3aa          in    r26,__lcd_direction
000185 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000186 bbaa          out   __lcd_direction,r26
000187 b3bb          in    r27,__lcd_port
000188 70bf          andi  r27,0xf
000189 81a8          ld    r26,y
00018a dfed      	RCALL __lcd_write_nibble_G100
00018b 81a8          ld    r26,y
00018c 95a2          swap  r26
00018d dfea      	RCALL __lcd_write_nibble_G100
00018e 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
00018f 940c 022f 	JMP  _0x2020001
                 __lcd_read_nibble_G100:
000191 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000192 940e 0163 	CALL __lcd_delay_G100
000194 b3e9          in    r30,__lcd_pin           ;read
000195 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000196 940e 0163 	CALL __lcd_delay_G100
000198 7fe0          andi  r30,0xf0
000199 9508      	RET
                 _lcd_read_byte0_G100:
00019a 940e 0163 	CALL __lcd_delay_G100
00019c dff4      	RCALL __lcd_read_nibble_G100
00019d 2fae          mov   r26,r30
00019e dff2      	RCALL __lcd_read_nibble_G100
00019f 98d9          cbi   __lcd_port,__lcd_rd     ;RD=0
0001a0 95e2          swap  r30
0001a1 2bea          or    r30,r26
0001a2 9508      	RET
                 _lcd_gotoxy:
0001a3 93aa      	ST   -Y,R26
0001a4 940e 0167 	CALL __lcd_ready
0001a6 81e8      	LD   R30,Y
0001a7 e0f0      	LDI  R31,0
0001a8 5ae0      	SUBI R30,LOW(-__base_y_G100)
0001a9 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0001aa 81e0      	LD   R30,Z
0001ab 81a9      	LDD  R26,Y+1
0001ac 0fae      	ADD  R26,R30
0001ad 940e 0182 	CALL __lcd_write_data
0001af 8059      	LDD  R5,Y+1
0001b0 8048      	LDD  R4,Y+0
0001b1 9622      	ADIW R28,2
0001b2 9508      	RET
                 _lcd_clear:
0001b3 940e 0167 	CALL __lcd_ready
0001b5 e0a2      	LDI  R26,LOW(2)
0001b6 940e 0182 	CALL __lcd_write_data
0001b8 940e 0167 	CALL __lcd_ready
0001ba e0ac      	LDI  R26,LOW(12)
0001bb 940e 0182 	CALL __lcd_write_data
0001bd 940e 0167 	CALL __lcd_ready
0001bf e0a1      	LDI  R26,LOW(1)
0001c0 940e 0182 	CALL __lcd_write_data
0001c2 e0e0      	LDI  R30,LOW(0)
0001c3 2e4e      	MOV  R4,R30
0001c4 2e5e      	MOV  R5,R30
0001c5 9508      	RET
                 _lcd_putchar:
0001c6 93aa      	ST   -Y,R26
0001c7 93ef          push r30
0001c8 93ff          push r31
0001c9 81a8          ld   r26,y
0001ca 9468          set
0001cb 30aa          cpi  r26,10
0001cc f019          breq __lcd_putchar1
0001cd 94e8          clt
0001ce 1457      	CP   R5,R7
0001cf f030      	BRLO _0x2000004
                 	__lcd_putchar1:
0001d0 9443      	INC  R4
0001d1 e0e0      	LDI  R30,LOW(0)
0001d2 93ea      	ST   -Y,R30
0001d3 2da4      	MOV  R26,R4
0001d4 dfce      	RCALL _lcd_gotoxy
0001d5 f036      	brts __lcd_putchar0
                 _0x2000004:
0001d6 9453      	INC  R5
0001d7 df8f          rcall __lcd_ready
0001d8 9ad8          sbi  __lcd_port,__lcd_rs ;RS=1
0001d9 81a8      	LD   R26,Y
0001da 940e 0182 	CALL __lcd_write_data
                 __lcd_putchar0:
0001dc 91ff          pop  r31
0001dd 91ef          pop  r30
0001de 940c 022f 	JMP  _0x2020001
                 _lcd_putsf:
0001e0 93ba      	ST   -Y,R27
0001e1 93aa      	ST   -Y,R26
0001e2 931a      	ST   -Y,R17
                 _0x2000008:
0001e3 81e9      	LDD  R30,Y+1
0001e4 81fa      	LDD  R31,Y+1+1
0001e5 9631      	ADIW R30,1
0001e6 83e9      	STD  Y+1,R30
0001e7 83fa      	STD  Y+1+1,R31
0001e8 9731      	SBIW R30,1
0001e9 91e4      	LPM  R30,Z
0001ea 2f1e      	MOV  R17,R30
0001eb 30e0      	CPI  R30,0
0001ec f019      	BREQ _0x200000A
0001ed 2fa1      	MOV  R26,R17
0001ee dfd7      	RCALL _lcd_putchar
0001ef cff3      	RJMP _0x2000008
                 _0x200000A:
0001f0 8118      	LDD  R17,Y+0
0001f1 9623      	ADIW R28,3
0001f2 9508      	RET
                 __long_delay_G100:
0001f3 27aa          clr   r26
0001f4 27bb          clr   r27
                 __long_delay0:
0001f5 9711          sbiw  r26,1         ;2 cycles
0001f6 f7f1          brne  __long_delay0 ;2 cycles
0001f7 9508      	RET
                 __lcd_init_write_G100:
0001f8 93aa      	ST   -Y,R26
0001f9 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0001fa b3aa          in    r26,__lcd_direction
0001fb 6fa7          ori   r26,0xf7                ;set as output
0001fc bbaa          out   __lcd_direction,r26
0001fd b3bb          in    r27,__lcd_port
0001fe 70bf          andi  r27,0xf
0001ff 81a8          ld    r26,y
000200 940e 0178 	CALL __lcd_write_nibble_G100
000202 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
000203 c02b      	RJMP _0x2020001
                 _lcd_init:
000204 93aa      	ST   -Y,R26
000205 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000206 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
000207 8078      	LDD  R7,Y+0
000208 81e8      	LD   R30,Y
000209 58e0      	SUBI R30,-LOW(128)
                +
00020a 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00020c 81e8      	LD   R30,Y
00020d 54e0      	SUBI R30,-LOW(192)
                +
00020e 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000210 d02b      	RCALL SUBOPT_0x2
000211 d02a      	RCALL SUBOPT_0x2
000212 d029      	RCALL SUBOPT_0x2
000213 dfdf      	RCALL __long_delay_G100
000214 e2a0      	LDI  R26,LOW(32)
000215 dfe2      	RCALL __lcd_init_write_G100
000216 dfdc      	RCALL __long_delay_G100
000217 e2a8      	LDI  R26,LOW(40)
000218 d027      	RCALL SUBOPT_0x3
000219 e0a4      	LDI  R26,LOW(4)
00021a d025      	RCALL SUBOPT_0x3
00021b e8a5      	LDI  R26,LOW(133)
00021c d023      	RCALL SUBOPT_0x3
00021d b3aa          in    r26,__lcd_direction
00021e 70af          andi  r26,0xf                 ;set as input
00021f bbaa          out   __lcd_direction,r26
000220 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
000221 940e 019a 	CALL _lcd_read_byte0_G100
000223 30e5      	CPI  R30,LOW(0x5)
000224 f011      	BREQ _0x200000B
000225 e0e0      	LDI  R30,LOW(0)
000226 c008      	RJMP _0x2020001
                 _0x200000B:
000227 940e 0167 	CALL __lcd_ready
000229 e0a6      	LDI  R26,LOW(6)
00022a 940e 0182 	CALL __lcd_write_data
00022c 940e 01b3 	CALL _lcd_clear
00022e e0e1      	LDI  R30,LOW(1)
                 _0x2020001:
00022f 9621      	ADIW R28,1
000230 9508      	RET
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000231 e0aa      	LDI  R26,LOW(10)
000232 e0b0      	LDI  R27,0
000233 940c 0244 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000235 01de      	MOVW R26,R28
000236 9614      	ADIW R26,4
000237 0fee      	LSL  R30
000238 1fff      	ROL  R31
000239 0fea      	ADD  R30,R26
00023a 1ffb      	ADC  R31,R27
00023b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
00023c 940e 01f3 	CALL __long_delay_G100
00023e e3a0      	LDI  R26,LOW(48)
00023f cfb8      	RJMP __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000240 940e 0182 	CALL __lcd_write_data
000242 940c 01f3 	JMP  __long_delay_G100
                 
                 
                 	.CSEG
                 _delay_ms:
000244 9610      	adiw r26,0
000245 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000246 ed80     +LDI R24 , LOW ( 0x7D0 )
000247 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000248 9701     +SBIW R24 , 1
000249 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00024a 95a8      	wdr
00024b 9711      	sbiw r26,1
00024c f7c9      	brne __delay_ms0
                 __delay_ms1:
00024d 9508      	ret
                 
                 __ANEGW1:
00024e 95f1      	NEG  R31
00024f 95e1      	NEG  R30
000250 40f0      	SBCI R31,0
000251 9508      	RET
                 
                 __DIVW21U:
000252 2400      	CLR  R0
000253 2411      	CLR  R1
000254 e190      	LDI  R25,16
                 __DIVW21U1:
000255 0faa      	LSL  R26
000256 1fbb      	ROL  R27
000257 1c00      	ROL  R0
000258 1c11      	ROL  R1
000259 1a0e      	SUB  R0,R30
00025a 0a1f      	SBC  R1,R31
00025b f418      	BRCC __DIVW21U2
00025c 0e0e      	ADD  R0,R30
00025d 1e1f      	ADC  R1,R31
00025e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00025f 60a1      	SBR  R26,1
                 __DIVW21U3:
000260 959a      	DEC  R25
000261 f799      	BRNE __DIVW21U1
000262 01fd      	MOVW R30,R26
000263 01d0      	MOVW R26,R0
000264 9508      	RET
                 
                 __DIVW21:
000265 d012      	RCALL __CHKSIGNW
000266 dfeb      	RCALL __DIVW21U
000267 f40e      	BRTC __DIVW211
000268 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000269 9508      	RET
                 
                 __MODW21:
00026a 94e8      	CLT
00026b ffb7      	SBRS R27,7
00026c c004      	RJMP __MODW211
00026d 95a0      	COM  R26
00026e 95b0      	COM  R27
00026f 9611      	ADIW R26,1
000270 9468      	SET
                 __MODW211:
000271 fdf7      	SBRC R31,7
000272 dfdb      	RCALL __ANEGW1
000273 dfde      	RCALL __DIVW21U
000274 01fd      	MOVW R30,R26
000275 f40e      	BRTC __MODW212
000276 dfd7      	RCALL __ANEGW1
                 __MODW212:
000277 9508      	RET
                 
                 __CHKSIGNW:
000278 94e8      	CLT
000279 fff7      	SBRS R31,7
00027a c002      	RJMP __CHKSW1
00027b dfd2      	RCALL __ANEGW1
00027c 9468      	SET
                 __CHKSW1:
00027d ffb7      	SBRS R27,7
00027e c006      	RJMP __CHKSW2
00027f 95a0      	COM  R26
000280 95b0      	COM  R27
000281 9611      	ADIW R26,1
000282 f800      	BLD  R0,0
000283 9403      	INC  R0
000284 fa00      	BST  R0,0
                 __CHKSW2:
000285 9508      	RET
                 
                 __SAVELOCR4:
000286 933a      	ST   -Y,R19
                 __SAVELOCR3:
000287 932a      	ST   -Y,R18
                 __SAVELOCR2:
000288 931a      	ST   -Y,R17
000289 930a      	ST   -Y,R16
00028a 9508      	RET
                 
                 __LOADLOCR4:
00028b 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00028c 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00028d 8119      	LDD  R17,Y+1
00028e 8108      	LD   R16,Y
00028f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  12 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:   8 r18:   5 r19:   4 r20:   0 r21:   0 r22:   4 r23:   0 
r24:  11 r25:   6 r26: 112 r27:  28 r28:   8 r29:   1 r30: 115 r31:  32 
x  :   6 y  :  50 z  :  11 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   4 
adiw  :  10 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   1 brmi  :   1 brne  :  14 brpl  :   0 brsh  :   1 brtc  :   2 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  39 
cbi   :  14 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 
cp    :   1 cpc   :   3 cpi   :  13 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  13 inc   :   3 jmp   :  27 ld    :  12 ldd   :  18 ldi   :  86 
lds   :   0 lpm   :   9 lsl   :   3 lsr   :   0 mov   :   7 movw  :  15 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   2 out   :  32 pop   :   2 push  :   2 rcall :  32 ret   :  20 
reti  :   0 rjmp  :  24 rol   :   5 ror   :   0 sbc   :   1 sbci  :   4 
sbi   :  11 sbic  :  10 sbis  :   0 sbiw  :  10 sbr   :   1 sbrc  :   2 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  23 std   :   6 sts   :   2 sub   :   1 subi  :   8 swap  :   2 
tst   :   1 wdr   :   1 
Instructions used: 62 out of 116 (53.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000520   1230     82   1312   16384   8.0%
[.dseg] 0x000060 0x000164      0      4      4    1119   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
